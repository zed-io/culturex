{"ast":null,"code":"import _slicedToArray from \"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css } from \"@chakra-ui/styled-system\";\nimport { createContext, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeContext } from \"@emotion/react\";\nimport * as React from \"react\";\nexport { ThemeProvider } from \"@emotion/react\";\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\");\n  }\n\n  return theme;\n}\n\nvar _createContext = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    StylesProvider = _createContext2[0],\n    useStyles = _createContext2[1];\n\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = function GlobalStyle() {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme: theme,\n        colorMode: colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/providers.tsx"],"names":["memoizedGet","theme","React","Error","createContext","name","errorMessage","GlobalStyle","colorMode","useColorMode","styleObjectOrFn","get","globalStyles","runIfFn","styles","css"],"mappings":";AAAA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,GAAA,QAAA,0BAAA;AACA,SAAA,aAAA,EAGEA,WAAW,IAHb,GAAA,EAAA,OAAA,QAAA,kBAAA;AAMA,SAAA,MAAA,EAAA,YAAA,QAAA,gBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,aAAA,QAAA,gBAAA;AAGA,OAAO,SAAA,QAAA,GAA6C;AAClD,MAAMC,KAAK,GAAGC,KAAK,CAALA,UAAAA,CAAd,YAAcA,CAAd;;AAGA,MAAI,CAAJ,KAAA,EAAY;AACV,UAAMC,KAAK,CAAX,2FAAW,CAAX;AAGD;;AAED,SAAA,KAAA;AACD;;qBAEmCC,aAAa,CAA0B;AACzEC,EAAAA,IAAI,EADqE,eAAA;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAA1B,C;;IAA3C,c;IAAA,S;;AAMN,SAAA,cAAA,EAAA,SAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,sBACTE,YAAtB,EAD+B;AAAA,MACvBD,SADuB,iBACvBA,SADuB;;AAE/B,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,MAAM,EAAGP,gBAAAA,KAAD,EAAW;AACjB,UAAMS,eAAe,GAAGC,GAAG,CAAA,KAAA,EAA3B,eAA2B,CAA3B;AACA,UAAMC,YAAY,GAAGC,OAAO,CAAA,eAAA,EAAkB;AAAEZ,QAAAA,KAAF,EAAEA,KAAF;AAASO,QAAAA,SAAAA,EAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAAJ,YAAA,EAAmB,OAAA,SAAA;AACnB,UAAMM,MAAM,GAAGC,GAAG,CAAHA,YAAG,CAAHA,CAAf,KAAeA,CAAf;AACA,aAAA,MAAA;AACD;AAPH,GAAA,CADF;AAFK,CAAA","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { css, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  createContext,\n  Dict,\n  memoizedGet as get,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { Global, Interpolation, ThemeContext } from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport { ThemeProvider } from \"@emotion/react\"\nexport type { ThemeProviderProps } from \"@emotion/react\"\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\",\n    )\n  }\n\n  return theme\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
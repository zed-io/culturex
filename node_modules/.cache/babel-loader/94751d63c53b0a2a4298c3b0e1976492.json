{"ast":null,"code":"import _slicedToArray from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{atomFamily,selectorFamily,useRecoilState}from\"recoil\";import{fetchMarketItems}from\"../flow/fetch-market-items.script\";import{IDLE,PROCESSING}from\"../global/constants\";export var $state=atomFamily({key:\"market-items::state\",default:selectorFamily({key:\"market-items::default\",get:function get(address){return/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",fetchMarketItems(address));case 1:case\"end\":return _context.stop();}}},_callee);}));}})});export var $status=atomFamily({key:\"market-items::status\",default:IDLE});export function useMarketItems(address){var _useRecoilState=useRecoilState($state(address)),_useRecoilState2=_slicedToArray(_useRecoilState,2),items=_useRecoilState2[0],setItems=_useRecoilState2[1];var _useRecoilState3=useRecoilState($status(address)),_useRecoilState4=_slicedToArray(_useRecoilState3,2),status=_useRecoilState4[0],setStatus=_useRecoilState4[1];var asSet=new Set(items);return{ids:items,status:status,refresh:function refresh(){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setStatus(PROCESSING);_context2.next=3;return fetchMarketItems(address).then(setItems);case 3:setStatus(IDLE);case 4:case\"end\":return _context2.stop();}}},_callee2);}))();},has:function has(id){return asSet.has(id);}};}","map":{"version":3,"sources":["/Users/mvps/culturex/web/src/hooks/use-market-items.hook.js"],"names":["atomFamily","selectorFamily","useRecoilState","fetchMarketItems","IDLE","PROCESSING","$state","key","default","get","address","$status","useMarketItems","items","setItems","status","setStatus","asSet","Set","ids","refresh","then","has","id"],"mappings":"0aAAA,OAAQA,UAAR,CAAoBC,cAApB,CAAoCC,cAApC,KAAyD,QAAzD,CACA,OAAQC,gBAAR,KAA+B,mCAA/B,CACA,OAAQC,IAAR,CAAcC,UAAd,KAA+B,qBAA/B,CAEA,MAAO,IAAMC,CAAAA,MAAM,CAAGN,UAAU,CAAC,CAC/BO,GAAG,CAAE,qBAD0B,CAE/BC,OAAO,CAAEP,cAAc,CAAC,CACtBM,GAAG,CAAE,uBADiB,CAEtBE,GAAG,CAAE,aAAAC,OAAO,6EAAI,mKAAYP,gBAAgB,CAACO,OAAD,CAA5B,wDAAJ,IAFU,CAAD,CAFQ,CAAD,CAAzB,CAQP,MAAO,IAAMC,CAAAA,OAAO,CAAGX,UAAU,CAAC,CAChCO,GAAG,CAAE,sBAD2B,CAEhCC,OAAO,CAAEJ,IAFuB,CAAD,CAA1B,CAKP,MAAO,SAASQ,CAAAA,cAAT,CAAwBF,OAAxB,CAAiC,qBACZR,cAAc,CAACI,MAAM,CAACI,OAAD,CAAP,CADF,oDAC/BG,KAD+B,qBACxBC,QADwB,0CAEVZ,cAAc,CAACS,OAAO,CAACD,OAAD,CAAR,CAFJ,qDAE/BK,MAF+B,qBAEvBC,SAFuB,qBAItC,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,GAAJ,CAAQL,KAAR,CAAd,CAEA,MAAO,CACLM,GAAG,CAAEN,KADA,CAELE,MAAM,CAANA,MAFK,CAGCK,OAHD,mBAGW,wMACdJ,SAAS,CAACX,UAAD,CAAT,CADc,uBAERF,CAAAA,gBAAgB,CAACO,OAAD,CAAhB,CAA0BW,IAA1B,CAA+BP,QAA/B,CAFQ,QAGdE,SAAS,CAACZ,IAAD,CAAT,CAHc,6DAIf,CAPI,CAQLkB,GARK,cAQDC,EARC,CAQG,CACN,MAAON,CAAAA,KAAK,CAACK,GAAN,CAAUC,EAAV,CAAP,CACD,CAVI,CAAP,CAYD","sourcesContent":["import {atomFamily, selectorFamily, useRecoilState} from \"recoil\"\nimport {fetchMarketItems} from \"../flow/fetch-market-items.script\"\nimport {IDLE, PROCESSING} from \"../global/constants\"\n\nexport const $state = atomFamily({\n  key: \"market-items::state\",\n  default: selectorFamily({\n    key: \"market-items::default\",\n    get: address => async () => fetchMarketItems(address),\n  }),\n})\n\nexport const $status = atomFamily({\n  key: \"market-items::status\",\n  default: IDLE,\n})\n\nexport function useMarketItems(address) {\n  const [items, setItems] = useRecoilState($state(address))\n  const [status, setStatus] = useRecoilState($status(address))\n\n  const asSet = new Set(items)\n\n  return {\n    ids: items,\n    status,\n    async refresh() {\n      setStatus(PROCESSING)\n      await fetchMarketItems(address).then(setItems)\n      setStatus(IDLE)\n    },\n    has(id) {\n      return asSet.has(id)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
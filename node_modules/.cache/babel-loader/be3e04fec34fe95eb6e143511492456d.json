{"ast":null,"code":"import { send, decode, script, args, arg, cdc } from \"@onflow/fcl\";\nimport { Address } from \"@onflow/types\";\nconst CODE = cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import CultureToken from 0xCultureToken\n  import CulturalItems from 0xCulturalItems\n  import CulturalItemsMarket from 0xCulturalItemsMarket\n\n  pub fun hasCultureToken(_ address: Address): Bool {\n    let receiver: Bool = getAccount(address)\n      .getCapability<&CultureToken.Vault{FungibleToken.Receiver}>(CultureToken.ReceiverPublicPath)\n      .check()\n\n    let balance: Bool = getAccount(address)\n      .getCapability<&CultureToken.Vault{FungibleToken.Balance}>(CultureToken.BalancePublicPath)\n      .check()\n\n    return receiver && balance\n  }\n\n  pub fun hasCulturalItems(_ address: Address): Bool {\n    return getAccount(address)\n      .getCapability<&CulturalItems.Collection{NonFungibleToken.CollectionPublic, CulturalItems.CulturalItemsCollectionPublic}>(CulturalItems.CollectionPublicPath)\n      .check()\n  }\n\n  pub fun hasCulturalItemsMarket(_ address: Address): Bool {\n    return getAccount(address)\n      .getCapability<&CulturalItemsMarket.Collection{CulturalItemsMarket.CollectionPublic}>(CulturalItemsMarket.CollectionPublicPath)\n      .check()\n  }\n\n  pub fun main(address: Address): {String: Bool} {\n    let ret: {String: Bool} = {}\n    ret[\"CultureToken\"] = hasCultureToken(address)\n    ret[\"CulturalItems\"] = hasCulturalItems(address)\n    ret[\"CulturalItemsMarket\"] = hasCulturalItemsMarket(address)\n    return ret\n  }\n`;\nexport function isAccountInitialized(address) {\n  if (address == null) return Promise.resolve(false); // prettier-ignore\n\n  return send([script(CODE), args([arg(address, Address)])]).then(decode);\n}","map":{"version":3,"sources":["/Users/mvps/nfthack/culturex/web/src/flow/is-account-initialized.script.js"],"names":["send","decode","script","args","arg","cdc","Address","CODE","isAccountInitialized","address","Promise","resolve","then"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,GAApC,EAAyCC,GAAzC,QAAmD,aAAnD;AACA,SAAQC,OAAR,QAAsB,eAAtB;AAEA,MAAMC,IAAI,GAAGF,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCA;AAwCA,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,MAAIA,OAAO,IAAI,IAAf,EAAqB,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP,CADuB,CAG5C;;AACA,SAAOX,IAAI,CAAC,CACVE,MAAM,CAACK,IAAD,CADI,EAEVJ,IAAI,CAAC,CACHC,GAAG,CAACK,OAAD,EAAUH,OAAV,CADA,CAAD,CAFM,CAAD,CAAJ,CAKJM,IALI,CAKCX,MALD,CAAP;AAMD","sourcesContent":["import {send, decode, script, args, arg, cdc} from \"@onflow/fcl\"\nimport {Address} from \"@onflow/types\"\n\nconst CODE = cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import CultureToken from 0xCultureToken\n  import CulturalItems from 0xCulturalItems\n  import CulturalItemsMarket from 0xCulturalItemsMarket\n\n  pub fun hasCultureToken(_ address: Address): Bool {\n    let receiver: Bool = getAccount(address)\n      .getCapability<&CultureToken.Vault{FungibleToken.Receiver}>(CultureToken.ReceiverPublicPath)\n      .check()\n\n    let balance: Bool = getAccount(address)\n      .getCapability<&CultureToken.Vault{FungibleToken.Balance}>(CultureToken.BalancePublicPath)\n      .check()\n\n    return receiver && balance\n  }\n\n  pub fun hasCulturalItems(_ address: Address): Bool {\n    return getAccount(address)\n      .getCapability<&CulturalItems.Collection{NonFungibleToken.CollectionPublic, CulturalItems.CulturalItemsCollectionPublic}>(CulturalItems.CollectionPublicPath)\n      .check()\n  }\n\n  pub fun hasCulturalItemsMarket(_ address: Address): Bool {\n    return getAccount(address)\n      .getCapability<&CulturalItemsMarket.Collection{CulturalItemsMarket.CollectionPublic}>(CulturalItemsMarket.CollectionPublicPath)\n      .check()\n  }\n\n  pub fun main(address: Address): {String: Bool} {\n    let ret: {String: Bool} = {}\n    ret[\"CultureToken\"] = hasCultureToken(address)\n    ret[\"CulturalItems\"] = hasCulturalItems(address)\n    ret[\"CulturalItemsMarket\"] = hasCulturalItemsMarket(address)\n    return ret\n  }\n`\n\nexport function isAccountInitialized(address) {\n  if (address == null) return Promise.resolve(false)\n\n  // prettier-ignore\n  return send([\n    script(CODE),\n    args([\n      arg(address, Address)\n    ])\n  ]).then(decode)\n}\n"]},"metadata":{},"sourceType":"module"}
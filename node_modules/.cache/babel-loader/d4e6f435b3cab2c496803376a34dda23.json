{"ast":null,"code":"import * as React from \"react\";\nvar id = 0;\n\nfunction genId() {\n  id += 1;\n  return id;\n}\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\n\n\nexport function useId(idProp, prefix) {\n  var [uuid] = React.useState(() => genId());\n  var id = (idProp != null ? idProp : uuid).toString();\n  return prefix ? prefix + \"-\" + id : id;\n}\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\n\nexport function useIds(idProp) {\n  var id = useId(idProp);\n\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  return prefixes.map(prefix => prefix + \"-\" + id);\n}","map":{"version":3,"sources":["../../src/use-id.ts"],"names":["id","React","genId","idProp","prefix","prefixes","useId"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,IAAIA,EAAE,GAAN,CAAA;;AAEA,SAAA,KAAA,GAAiB;AACfA,EAAAA,EAAE,IAAFA,CAAAA;AACA,SAAA,EAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAA,KAAA,CAAA,MAAA,EAAA,MAAA,EAAiD;AACtD,MAAM,CAAA,IAAA,IAASC,KAAK,CAALA,QAAAA,CAAe,MAAMC,KAApC,EAAeD,CAAf;AACA,MAAMD,EAAE,GAAG,CAACG,MAAD,IAAA,IAACA,GAAD,MAACA,GAAD,IAAA,EAAX,QAAW,EAAX;AACA,SAAOC,MAAM,GAAMA,MAAN,GAAA,GAAMA,GAAN,EAAA,GAAb,EAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,MAAA,CAAA,MAAA,EAAwD;AAC7D,MAAMJ,EAAE,GAAGM,KAAK,CAAhB,MAAgB,CAAhB;;AAD6D,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAApBD,QAAoB,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAApBA,IAAAA,QAAoB,CAAA,IAAA,GAAA,CAAA,CAApBA,GAAoB,SAAA,CAAA,IAAA,CAApBA;AAAoB;;AAE7D,SAAOA,QAAQ,CAARA,GAAAA,CAAcD,MAAD,IAAeA,MAAf,GAAA,GAAeA,GAAnC,EAAOC,CAAP;AACD","sourcesContent":["import * as React from \"react\"\n\nlet id = 0\n\nfunction genId() {\n  id += 1\n  return id\n}\n\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\nexport function useId(idProp?: string, prefix?: string) {\n  const [uuid] = React.useState(() => genId())\n  const id = (idProp ?? uuid).toString()\n  return prefix ? `${prefix}-${id}` : id\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return prefixes.map((prefix) => `${prefix}-${id}`)\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useCallbackRef, useForceUpdate, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { usePortalManager } from \"./portal-manager\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\n\nvar Container = props => {\n  var {\n    children,\n    zIndex\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chakra-portal-zIndex\",\n    style: {\n      position: \"absolute\",\n      zIndex,\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  }, children);\n};\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/docs/overlay/portal\n */\n\n\nexport function Portal(props) {\n  var tempNode = React.useRef(null);\n  var portal = React.useRef(null);\n  var forceUpdate = useForceUpdate();\n  var getContainer = useCallbackRef(props.getContainer);\n  var onMount = useCallbackRef(props.onMount);\n  var onUnmount = useCallbackRef(props.onUnmount);\n  var parentPortal = usePortalContext();\n  var manager = usePortalManager();\n  useSafeLayoutEffect(() => {\n    var _ref, _getContainer;\n\n    if (!tempNode.current) return;\n    var doc = tempNode.current.ownerDocument;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = Portal.className;\n    var host = (_ref = (_getContainer = getContainer()) != null ? _getContainer : parentPortal) != null ? _ref : doc.body;\n    host.appendChild(portal.current);\n    forceUpdate();\n    onMount();\n    var portalNode = portal.current;\n    return () => {\n      onUnmount();\n\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, []);\n  var childrenToRender = manager != null && manager.zIndex ? /*#__PURE__*/React.createElement(Container, null, props.children) : props.children;\n  return portal.current ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {\n    value: portal.current\n  }, childrenToRender), portal.current) : /*#__PURE__*/React.createElement(\"span\", {\n    ref: tempNode\n  });\n}\nPortal.className = \"chakra-portal\";\nPortal.selector = \".\" + Portal.className;\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}","map":{"version":3,"sources":["../../src/portal.tsx"],"names":["createContext","strict","name","Container","props","zIndex","position","top","left","right","bottom","tempNode","React","portal","forceUpdate","useForceUpdate","getContainer","useCallbackRef","onMount","onUnmount","parentPortal","usePortalContext","manager","usePortalManager","useSafeLayoutEffect","doc","Portal","host","portalNode","childrenToRender","createPortal","current"],"mappings":"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","sourcesContent":["import {\n  useCallbackRef,\n  useForceUpdate,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { createPortal } from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nconst Container: React.FC<{ zIndex?: number }> = (props) => {\n  const { children, zIndex } = props\n  return (\n    <div\n      className=\"chakra-portal-zIndex\"\n      style={{\n        position: \"absolute\",\n        zIndex,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport interface PortalProps {\n  /**\n   * Function called when the portal mounts\n   */\n  onMount?(): void\n  /**\n   * Function called when the portal unmounts\n   */\n  onUnmount?(): void\n  /**\n   * Function that will be called to get the parent element\n   * that the portal will be attached to.\n   */\n  getContainer?: () => HTMLElement | null\n  /**\n   * The content or node you'll like to portal\n   */\n  children: React.ReactNode\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/docs/overlay/portal\n */\n\nexport function Portal(props: PortalProps) {\n  const tempNode = React.useRef<HTMLDivElement | null>(null)\n  const portal = React.useRef<HTMLDivElement | null>(null)\n\n  const forceUpdate = useForceUpdate()\n\n  const getContainer = useCallbackRef(props.getContainer)\n  const onMount = useCallbackRef(props.onMount)\n  const onUnmount = useCallbackRef(props.onUnmount)\n\n  const parentPortal = usePortalContext()\n  const manager = usePortalManager()\n\n  useSafeLayoutEffect(() => {\n    if (!tempNode.current) return\n\n    const doc = tempNode.current!.ownerDocument\n    portal.current = doc.createElement(\"div\")\n    portal.current.className = Portal.className\n\n    const host = getContainer() ?? parentPortal ?? doc.body\n\n    host.appendChild(portal.current)\n    forceUpdate()\n\n    onMount()\n\n    const portalNode = portal.current\n    return () => {\n      onUnmount()\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode)\n      }\n    }\n  }, [])\n\n  const childrenToRender = manager?.zIndex ? (\n    <Container>{props.children}</Container>\n  ) : (\n    props.children\n  )\n\n  return portal.current ? (\n    createPortal(\n      <PortalContextProvider value={portal.current}>\n        {childrenToRender}\n      </PortalContextProvider>,\n      portal.current,\n    )\n  ) : (\n    <span ref={tempNode} />\n  )\n}\n\nPortal.className = \"chakra-portal\"\nPortal.selector = `.${Portal.className}`\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\"\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import*as fcl from\"@onflow/fcl\";import*as t from\"@onflow/types\";import{batch}from\"./util/batch\";var CODE=fcl.cdc(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\nimport NonFungibleToken from 0xNonFungibleToken\\nimport CulturalItems from 0xCulturalItems\\n\\npub struct Item {\\n  pub let id: UInt64\\n  pub let owner: Address\\n  pub let name: String\\n  pub let country: String\\n  pub let year: String\\n  pub let metadata: {String: String}\\n\\n  init(\\n    id: UInt64,\\n    owner: Address,\\n    name: String,\\n    country: String,\\n    year: String,\\n    metadata: {String: String}\\n  ) {\\n    self.id = id\\n    self.owner = owner\\n    self.name = name\\n    self.country = country\\n    self.year = year\\n    self.metadata = metadata\\n  }\\n}\\n\\npub fun fetch(address: Address, id: UInt64): Item? {\\n  if let col = getAccount(address).getCapability<&CulturalItems.Collection{NonFungibleToken.CollectionPublic, CulturalItems.CulturalItemsCollectionPublic}>(CulturalItems.CollectionPublicPath).borrow() {\\n    if let item = col.borrowCulturalItem(id: id) {\\n      return Item(\\n        id: id,\\n        owner: address,\\n        name: item.name,\\n        country: item.country,\\n        year: item.year,\\n        metadata: item.metadata\\n      )\\n    }\\n  }\\n\\n  return nil\\n}\\n\\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: Item?} {\\n  let r: {String: Item?} = {}\\n  var i = 0\\n  while i < keys.length {\\n    let key = keys[i]\\n    let address = addresses[i]\\n    let id = ids[i]\\n    r[key] = fetch(address: address, id: id)\\n    i = i + 1\\n  }\\n  return r\\n}\\n\"])));var collate=function collate(px){return Object.keys(px).reduce(function(acc,key){acc.keys.push(key);acc.addresses.push(px[key][0]);acc.ids.push(px[key][1]);return acc;},{keys:[],addresses:[],ids:[]});};var _batch=batch(\"FETCH_ACCOUNT_ITEM\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(px){var _collate,keys,addresses,ids;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_collate=collate(px),keys=_collate.keys,addresses=_collate.addresses,ids=_collate.ids;return _context.abrupt(\"return\",fcl.send([fcl.script(CODE),fcl.args([fcl.arg(keys,t.Array(t.String)),fcl.arg(addresses,t.Array(t.Address)),fcl.arg(ids.map(Number),t.Array(t.UInt64))])]).then(fcl.decode));case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()),enqueue=_batch.enqueue;export function fetchAccountItem(_x2,_x3){return _fetchAccountItem.apply(this,arguments);}function _fetchAccountItem(){_fetchAccountItem=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address,id){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(address==null)){_context2.next=2;break;}return _context2.abrupt(\"return\",Promise.resolve(null));case 2:if(!(id==null)){_context2.next=4;break;}return _context2.abrupt(\"return\",Promise.resolve(null));case 4:return _context2.abrupt(\"return\",enqueue(address,id));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _fetchAccountItem.apply(this,arguments);}","map":{"version":3,"sources":["/Users/mvps/culturex/web/src/flow/fetch-account-item.script.js"],"names":["fcl","t","batch","CODE","cdc","collate","px","Object","keys","reduce","acc","key","push","addresses","ids","send","script","args","arg","Array","String","Address","map","Number","UInt64","then","decode","enqueue","fetchAccountItem","address","id","Promise","resolve"],"mappings":"8cAAA,MAAO,GAAKA,CAAAA,GAAZ,KAAqB,aAArB,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,eAAnB,CACA,OAAQC,KAAR,KAAoB,cAApB,CAEA,GAAMC,CAAAA,IAAI,CAAGH,GAAG,CAACI,GAAP,g9CAAV,CA4DA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,EAAE,CAAI,CACpB,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,EAAZ,EAAgBG,MAAhB,CACL,SAACC,GAAD,CAAMC,GAAN,CAAc,CACZD,GAAG,CAACF,IAAJ,CAASI,IAAT,CAAcD,GAAd,EACAD,GAAG,CAACG,SAAJ,CAAcD,IAAd,CAAmBN,EAAE,CAACK,GAAD,CAAF,CAAQ,CAAR,CAAnB,EACAD,GAAG,CAACI,GAAJ,CAAQF,IAAR,CAAaN,EAAE,CAACK,GAAD,CAAF,CAAQ,CAAR,CAAb,EACA,MAAOD,CAAAA,GAAP,CACD,CANI,CAOL,CAACF,IAAI,CAAE,EAAP,CAAWK,SAAS,CAAE,EAAtB,CAA0BC,GAAG,CAAE,EAA/B,CAPK,CAAP,CASD,CAVD,C,WAYkBZ,KAAK,CAAC,oBAAD,0FAAuB,iBAAMI,EAAN,2JACbD,OAAO,CAACC,EAAD,CADM,CACrCE,IADqC,UACrCA,IADqC,CAC/BK,SAD+B,UAC/BA,SAD+B,CACpBC,GADoB,UACpBA,GADoB,iCAGrCd,GAAG,CACPe,IADI,CACC,CACJf,GAAG,CAACgB,MAAJ,CAAWb,IAAX,CADI,CAEJH,GAAG,CAACiB,IAAJ,CAAS,CACPjB,GAAG,CAACkB,GAAJ,CAAQV,IAAR,CAAcP,CAAC,CAACkB,KAAF,CAAQlB,CAAC,CAACmB,MAAV,CAAd,CADO,CAEPpB,GAAG,CAACkB,GAAJ,CAAQL,SAAR,CAAmBZ,CAAC,CAACkB,KAAF,CAAQlB,CAAC,CAACoB,OAAV,CAAnB,CAFO,CAGPrB,GAAG,CAACkB,GAAJ,CAAQJ,GAAG,CAACQ,GAAJ,CAAQC,MAAR,CAAR,CAAyBtB,CAAC,CAACkB,KAAF,CAAQlB,CAAC,CAACuB,MAAV,CAAzB,CAHO,CAAT,CAFI,CADD,EASJC,IATI,CASCzB,GAAG,CAAC0B,MATL,CAHqC,wDAAvB,+D,CAAhBC,O,QAAAA,O,CAeP,eAAsBC,CAAAA,gBAAtB,0D,uGAAO,kBAAgCC,OAAhC,CAAyCC,EAAzC,2HACDD,OAAO,EAAI,IADV,4DACuBE,OAAO,CAACC,OAAR,CAAgB,IAAhB,CADvB,cAEDF,EAAE,EAAI,IAFL,4DAEkBC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAFlB,0CAGEL,OAAO,CAACE,OAAD,CAAUC,EAAV,CAHT,0D","sourcesContent":["import * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\nimport {batch} from \"./util/batch\"\n\nconst CODE = fcl.cdc`\nimport NonFungibleToken from 0xNonFungibleToken\nimport CulturalItems from 0xCulturalItems\n\npub struct Item {\n  pub let id: UInt64\n  pub let owner: Address\n  pub let name: String\n  pub let country: String\n  pub let year: String\n  pub let metadata: {String: String}\n\n  init(\n    id: UInt64,\n    owner: Address,\n    name: String,\n    country: String,\n    year: String,\n    metadata: {String: String}\n  ) {\n    self.id = id\n    self.owner = owner\n    self.name = name\n    self.country = country\n    self.year = year\n    self.metadata = metadata\n  }\n}\n\npub fun fetch(address: Address, id: UInt64): Item? {\n  if let col = getAccount(address).getCapability<&CulturalItems.Collection{NonFungibleToken.CollectionPublic, CulturalItems.CulturalItemsCollectionPublic}>(CulturalItems.CollectionPublicPath).borrow() {\n    if let item = col.borrowCulturalItem(id: id) {\n      return Item(\n        id: id,\n        owner: address,\n        name: item.name,\n        country: item.country,\n        year: item.year,\n        metadata: item.metadata\n      )\n    }\n  }\n\n  return nil\n}\n\npub fun main(keys: [String], addresses: [Address], ids: [UInt64]): {String: Item?} {\n  let r: {String: Item?} = {}\n  var i = 0\n  while i < keys.length {\n    let key = keys[i]\n    let address = addresses[i]\n    let id = ids[i]\n    r[key] = fetch(address: address, id: id)\n    i = i + 1\n  }\n  return r\n}\n`\n\nconst collate = px => {\n  return Object.keys(px).reduce(\n    (acc, key) => {\n      acc.keys.push(key)\n      acc.addresses.push(px[key][0])\n      acc.ids.push(px[key][1])\n      return acc\n    },\n    {keys: [], addresses: [], ids: []}\n  )\n}\n\nconst {enqueue} = batch(\"FETCH_ACCOUNT_ITEM\", async px => {\n  const {keys, addresses, ids} = collate(px)\n\n  return fcl\n    .send([\n      fcl.script(CODE),\n      fcl.args([\n        fcl.arg(keys, t.Array(t.String)),\n        fcl.arg(addresses, t.Array(t.Address)),\n        fcl.arg(ids.map(Number), t.Array(t.UInt64)),\n      ]),\n    ])\n    .then(fcl.decode)\n})\n\nexport async function fetchAccountItem(address, id) {\n  if (address == null) return Promise.resolve(null)\n  if (id == null) return Promise.resolve(null)\n  return enqueue(address, id)\n}\n"]},"metadata":{},"sourceType":"module"}
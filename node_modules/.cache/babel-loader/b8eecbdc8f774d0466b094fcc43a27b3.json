{"ast":null,"code":"import * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nimport { tx } from \"./util/tx\";\nconst CODE = fcl.cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import CultureToken from 0xCultureToken\n  import CulturalItems from 0xCulturalItems\n  import CulturalItemsMarket from 0xCulturalItemsMarket\n\n  transaction(saleItemID: UInt64, salePrice: UFix64) {\n    prepare(acct: AuthAccount) {\n      let market = acct.borrow<&CulturalItemsMarket.Collection>(from: CulturalItemsMarket.CollectionStoragePath) ?? panic(\"Need the marketplace resouce\")\n\n      let sellerPaymentReceiver = acct.getCapability<&CultureToken.Vault{FungibleToken.Receiver}>(CultureToken.ReceiverPublicPath)\n\n      let providerPath = /private/CulturalItemsCollectionProvider\n      acct.unlink(providerPath)\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\n      }\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\n      }\n      let itemProvider = acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath)\n      assert(itemProvider.borrow() != nil, message: \"Missing or mis-typed CulturalItemsCollection provider\")\n\n      let offer <- CulturalItemsMarket.createSaleOffer(\n        sellerItemProvider: itemProvider,\n        saleItemID: saleItemID,\n        sellerPaymentReceiver: sellerPaymentReceiver,\n        salePrice: salePrice,\n      )\n\n      market.insert(offer: <-offer)\n    }\n  }\n`;\nexport function createSaleOffer({\n  itemId,\n  price\n}, opts = {}) {\n  if (itemId == null) throw new Error(\"createSaleOffer(itemId, price) -- itemId required\");\n  if (price == null) throw new Error(\"createSaleOffer(itemId, price) -- price required\"); // prettier-ignore\n\n  return tx([fcl.transaction(CODE), fcl.args([fcl.arg(Number(itemId), t.UInt64), fcl.arg(String(price), t.UFix64)]), fcl.proposer(fcl.authz), fcl.payer(fcl.authz), fcl.authorizations([fcl.authz]), fcl.limit(1000)], opts);\n}","map":{"version":3,"sources":["/Users/mvps/culturex/web/src/flow/create-sale-offer.tx.js"],"names":["fcl","t","tx","CODE","cdc","createSaleOffer","itemId","price","opts","Error","transaction","args","arg","Number","UInt64","String","UFix64","proposer","authz","payer","authorizations","limit"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,SAAQC,EAAR,QAAiB,WAAjB;AAEA,MAAMC,IAAI,GAAGH,GAAG,CAACI,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlCA;AAoCA,OAAO,SAASC,eAAT,CAAyB;AAACC,EAAAA,MAAD;AAASC,EAAAA;AAAT,CAAzB,EAA0CC,IAAI,GAAG,EAAjD,EAAqD;AAC1D,MAAIF,MAAM,IAAI,IAAd,EACE,MAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;AACF,MAAIF,KAAK,IAAI,IAAb,EACE,MAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN,CAJwD,CAM1D;;AACA,SAAOP,EAAE,CAAC,CACRF,GAAG,CAACU,WAAJ,CAAgBP,IAAhB,CADQ,EAERH,GAAG,CAACW,IAAJ,CAAS,CACPX,GAAG,CAACY,GAAJ,CAAQC,MAAM,CAACP,MAAD,CAAd,EAAwBL,CAAC,CAACa,MAA1B,CADO,EAEPd,GAAG,CAACY,GAAJ,CAAQG,MAAM,CAACR,KAAD,CAAd,EAAuBN,CAAC,CAACe,MAAzB,CAFO,CAAT,CAFQ,EAMRhB,GAAG,CAACiB,QAAJ,CAAajB,GAAG,CAACkB,KAAjB,CANQ,EAORlB,GAAG,CAACmB,KAAJ,CAAUnB,GAAG,CAACkB,KAAd,CAPQ,EAQRlB,GAAG,CAACoB,cAAJ,CAAmB,CACjBpB,GAAG,CAACkB,KADa,CAAnB,CARQ,EAWRlB,GAAG,CAACqB,KAAJ,CAAU,IAAV,CAXQ,CAAD,EAYNb,IAZM,CAAT;AAaD","sourcesContent":["import * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\nimport {tx} from \"./util/tx\"\n\nconst CODE = fcl.cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import CultureToken from 0xCultureToken\n  import CulturalItems from 0xCulturalItems\n  import CulturalItemsMarket from 0xCulturalItemsMarket\n\n  transaction(saleItemID: UInt64, salePrice: UFix64) {\n    prepare(acct: AuthAccount) {\n      let market = acct.borrow<&CulturalItemsMarket.Collection>(from: CulturalItemsMarket.CollectionStoragePath) ?? panic(\"Need the marketplace resouce\")\n\n      let sellerPaymentReceiver = acct.getCapability<&CultureToken.Vault{FungibleToken.Receiver}>(CultureToken.ReceiverPublicPath)\n\n      let providerPath = /private/CulturalItemsCollectionProvider\n      acct.unlink(providerPath)\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\n      }\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\n      }\n      let itemProvider = acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath)\n      assert(itemProvider.borrow() != nil, message: \"Missing or mis-typed CulturalItemsCollection provider\")\n\n      let offer <- CulturalItemsMarket.createSaleOffer(\n        sellerItemProvider: itemProvider,\n        saleItemID: saleItemID,\n        sellerPaymentReceiver: sellerPaymentReceiver,\n        salePrice: salePrice,\n      )\n\n      market.insert(offer: <-offer)\n    }\n  }\n`\n\nexport function createSaleOffer({itemId, price}, opts = {}) {\n  if (itemId == null)\n    throw new Error(\"createSaleOffer(itemId, price) -- itemId required\")\n  if (price == null)\n    throw new Error(\"createSaleOffer(itemId, price) -- price required\")\n\n  // prettier-ignore\n  return tx([\n    fcl.transaction(CODE),\n    fcl.args([\n      fcl.arg(Number(itemId), t.UInt64),\n      fcl.arg(String(price), t.UFix64),\n    ]),\n    fcl.proposer(fcl.authz),\n    fcl.payer(fcl.authz),\n    fcl.authorizations([\n      fcl.authz\n    ]),\n    fcl.limit(1000)\n  ], opts)\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import*as fcl from\"@onflow/fcl\";import*as t from\"@onflow/types\";import{tx}from\"./util/tx\";var CODE=fcl.cdc(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  import FungibleToken from 0xFungibleToken\\n  import NonFungibleToken from 0xNonFungibleToken\\n  import CultureToken from 0xCultureToken\\n  import CulturalItems from 0xCulturalItems\\n  import CulturalItemsMarket from 0xCulturalItemsMarket\\n\\n  transaction(saleItemID: UInt64, salePrice: UFix64) {\\n    prepare(acct: AuthAccount) {\\n      let market = acct.borrow<&CulturalItemsMarket.Collection>(from: CulturalItemsMarket.CollectionStoragePath) ?? panic(\\\"Need the marketplace resouce\\\")\\n\\n      let sellerPaymentReceiver = acct.getCapability<&CultureToken.Vault{FungibleToken.Receiver}>(CultureToken.ReceiverPublicPath)\\n\\n      let providerPath = /private/CulturalItemsCollectionProvider\\n      acct.unlink(providerPath)\\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\\n      }\\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\\n      }\\n      let itemProvider = acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath)\\n      assert(itemProvider.borrow() != nil, message: \\\"Missing or mis-typed CulturalItemsCollection provider\\\")\\n\\n      let offer <- CulturalItemsMarket.createSaleOffer(\\n        sellerItemProvider: itemProvider,\\n        saleItemID: saleItemID,\\n        sellerPaymentReceiver: sellerPaymentReceiver,\\n        salePrice: salePrice,\\n      )\\n\\n      market.insert(offer: <-offer)\\n    }\\n  }\\n\"])));export function createSaleOffer(_ref){var itemId=_ref.itemId,price=_ref.price;var opts=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(itemId==null)throw new Error(\"createSaleOffer(itemId, price) -- itemId required\");if(price==null)throw new Error(\"createSaleOffer(itemId, price) -- price required\");// prettier-ignore\nreturn tx([fcl.transaction(CODE),fcl.args([fcl.arg(Number(itemId),t.UInt64),fcl.arg(String(price),t.UFix64)]),fcl.proposer(fcl.authz),fcl.payer(fcl.authz),fcl.authorizations([fcl.authz]),fcl.limit(1000)],opts);}","map":{"version":3,"sources":["/Users/mvps/culturex/web/src/flow/create-sale-offer.tx.js"],"names":["fcl","t","tx","CODE","cdc","createSaleOffer","itemId","price","opts","Error","transaction","args","arg","Number","UInt64","String","UFix64","proposer","authz","payer","authorizations","limit"],"mappings":"mLAAA,MAAO,GAAKA,CAAAA,GAAZ,KAAqB,aAArB,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,eAAnB,CACA,OAAQC,EAAR,KAAiB,WAAjB,CAEA,GAAMC,CAAAA,IAAI,CAAGH,GAAG,CAACI,GAAP,qwDAAV,CAoCA,MAAO,SAASC,CAAAA,eAAT,MAAqD,IAA3BC,CAAAA,MAA2B,MAA3BA,MAA2B,CAAnBC,KAAmB,MAAnBA,KAAmB,IAAXC,CAAAA,IAAW,2DAAJ,EAAI,CAC1D,GAAIF,MAAM,EAAI,IAAd,CACE,KAAM,IAAIG,CAAAA,KAAJ,CAAU,mDAAV,CAAN,CACF,GAAIF,KAAK,EAAI,IAAb,CACE,KAAM,IAAIE,CAAAA,KAAJ,CAAU,kDAAV,CAAN,CAEF;AACA,MAAOP,CAAAA,EAAE,CAAC,CACRF,GAAG,CAACU,WAAJ,CAAgBP,IAAhB,CADQ,CAERH,GAAG,CAACW,IAAJ,CAAS,CACPX,GAAG,CAACY,GAAJ,CAAQC,MAAM,CAACP,MAAD,CAAd,CAAwBL,CAAC,CAACa,MAA1B,CADO,CAEPd,GAAG,CAACY,GAAJ,CAAQG,MAAM,CAACR,KAAD,CAAd,CAAuBN,CAAC,CAACe,MAAzB,CAFO,CAAT,CAFQ,CAMRhB,GAAG,CAACiB,QAAJ,CAAajB,GAAG,CAACkB,KAAjB,CANQ,CAORlB,GAAG,CAACmB,KAAJ,CAAUnB,GAAG,CAACkB,KAAd,CAPQ,CAQRlB,GAAG,CAACoB,cAAJ,CAAmB,CACjBpB,GAAG,CAACkB,KADa,CAAnB,CARQ,CAWRlB,GAAG,CAACqB,KAAJ,CAAU,IAAV,CAXQ,CAAD,CAYNb,IAZM,CAAT,CAaD","sourcesContent":["import * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\nimport {tx} from \"./util/tx\"\n\nconst CODE = fcl.cdc`\n  import FungibleToken from 0xFungibleToken\n  import NonFungibleToken from 0xNonFungibleToken\n  import CultureToken from 0xCultureToken\n  import CulturalItems from 0xCulturalItems\n  import CulturalItemsMarket from 0xCulturalItemsMarket\n\n  transaction(saleItemID: UInt64, salePrice: UFix64) {\n    prepare(acct: AuthAccount) {\n      let market = acct.borrow<&CulturalItemsMarket.Collection>(from: CulturalItemsMarket.CollectionStoragePath) ?? panic(\"Need the marketplace resouce\")\n\n      let sellerPaymentReceiver = acct.getCapability<&CultureToken.Vault{FungibleToken.Receiver}>(CultureToken.ReceiverPublicPath)\n\n      let providerPath = /private/CulturalItemsCollectionProvider\n      acct.unlink(providerPath)\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\n      }\n      if !acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath).check() {\n        acct.link<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath, target: CulturalItems.CollectionStoragePath)\n      }\n      let itemProvider = acct.getCapability<&CulturalItems.Collection{NonFungibleToken.Provider}>(providerPath)\n      assert(itemProvider.borrow() != nil, message: \"Missing or mis-typed CulturalItemsCollection provider\")\n\n      let offer <- CulturalItemsMarket.createSaleOffer(\n        sellerItemProvider: itemProvider,\n        saleItemID: saleItemID,\n        sellerPaymentReceiver: sellerPaymentReceiver,\n        salePrice: salePrice,\n      )\n\n      market.insert(offer: <-offer)\n    }\n  }\n`\n\nexport function createSaleOffer({itemId, price}, opts = {}) {\n  if (itemId == null)\n    throw new Error(\"createSaleOffer(itemId, price) -- itemId required\")\n  if (price == null)\n    throw new Error(\"createSaleOffer(itemId, price) -- price required\")\n\n  // prettier-ignore\n  return tx([\n    fcl.transaction(CODE),\n    fcl.args([\n      fcl.arg(Number(itemId), t.UInt64),\n      fcl.arg(String(price), t.UFix64),\n    ]),\n    fcl.proposer(fcl.authz),\n    fcl.payer(fcl.authz),\n    fcl.authorizations([\n      fcl.authz\n    ]),\n    fcl.limit(1000)\n  ], opts)\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { isTransaction as e, isScript as n, Ok as t, get as r, Bad as o } from \"@onflow/interaction\";\n\nvar a = function a(_a) {\n  try {\n    return Promise.resolve(function (o, i) {\n      try {\n        var c = function () {\n          if (function (t) {\n            return !(e(t) || n(t));\n          }(_a)) return t(_a);\n          var o = r(_a, \"ix.cadence\");\n          if (\"string\" == typeof o) return _a.message.cadence = o, t(_a);\n\n          if (\"function\" == typeof o) {\n            Object.values(_a.params).length >= 1 && console.error(\"\\n          %cFCL/SDK Deprecation Notice\\n          ============================\\n\\n          Interopolation of functions into template literals will not be a thing in future versions of the Flow-JS-SDK or FCL.\\n          You can learn more (including a guide on common transition paths) here: https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\\n\\n          ============================\\n        \", \"font-weight:bold;font-family:monospace;\");\n            var i = Object.fromEntries(Object.values(_a.params).map(function (e) {\n              return [e.key, e.value];\n            }));\n            return Promise.resolve(o(i)).then(function (e) {\n              return _a.message.cadence = e, t(_a);\n            });\n          }\n\n          throw new Error('ix.cadence had a type of: \"' + typeof o + '\", but it must needs to be a \"string\" or a \"function\" that returns a string.');\n        }();\n      } catch (e) {\n        return i(e);\n      }\n\n      return c && c.then ? c.then(void 0, i) : c;\n    }(0, function (e) {\n      return o(_a, e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nexport { a as resolveCadence };","map":{"version":3,"sources":["../src/index.js"],"names":["ix","isTransaction","isScript","resolveCadence","ignore","Ok","cadence","get","message","Object","values","params","length","console","error","fromEntries","map","p","key","value","Error","Bad","body","recover","result","e","then"],"mappings":";;AAYsBG,IAAAA,CAAAA,GAAAA,WAAgBH,EAAhBG,EAAgBH;AAAAA,MAAAA;AAAAA,WAAAA,OAAAA,CAAAA,OAAAA,CAsiB/B,UAAgBsB,CAAhB,EAAsBC,CAAtB,EAAsBA;AAC5B,UAAA;AACC,YAAIC,CAAAA,GAAAA,YAAAA;AAtiBF,cAZJ,UAAgBxB,CAAhB,EAAgBA;AACd,mBAAA,EAASC,CAAAA,CAAcD,CAAdC,CAAAA,IAAqBC,CAAAA,CAASF,CAATE,CAA9B,CAAA;AAWME,WAZR,CAYeJ,EAZf,CAYI,EAAgB,OAAOK,CAAAA,CAAGL,EAAHK,CAAP;AAEhB,cAAMC,CAAAA,GAAUC,CAAAA,CAAIP,EAAJO,EAAQ,YAARA,CAAhB;AAHE,cAKqB,YAAA,OAAZD,CALT,EAOA,OADAN,EAAAA,CAAGQ,OAAHR,CAAWM,OAAXN,GAAqBM,CAArBN,EACOK,CAAAA,CAAGL,EAAHK,CAAP;;AAAUL,cAEkB,cAAA,OAAZM,CAFNN,EAE8B;AACpCS,YAAAA,MAAAA,CAAOC,MAAPD,CAAcT,EAAAA,CAAGW,MAAjBF,EAAyBG,MAAzBH,IAAmC,CAAnCA,IACFI,OAAAA,CAAQC,KAARD,CAAQC,+bAARD,EAUE,yCAVFA,CADEJ;AAcJ,gBAAME,CAAAA,GAASF,MAAAA,CAAOM,WAAPN,CAAmBA,MAAAA,CAAOC,MAAPD,CAAcT,EAAAA,CAAGW,MAAjBF,EAAyBO,GAAzBP,CAA6B,UAAA,CAAA,EAAA;AAAA,qBAAK,CAACQ,CAAAA,CAAEC,GAAH,EAAQD,CAAAA,CAAEE,KAAV,CAAL;AAAeA,aAA5CV,CAAnBA,CAAf;AAfwC,mBAAA,OAAA,CAAA,OAAA,CAgBbH,CAAAA,CAAQK,CAARL,CAhBa,EAgBLK,IAhBK,CAgBLA,UAAAA,CAAAA,EAAAA;AACnC,qBADAX,EAAAA,CAAGQ,OAAHR,CAAWM,OAAXN,GAAWM,CAAXN,EACOK,CAAAA,CAAGL,EAAHK,CAAP;AAAUL,aAjB8B,CAAA;AAmBxC;;AAAA,gBAAA,IAAUoB,KAAV,CAAUA,gCAAAA,OAA2Cd,CAA3Cc,GAA2Cd,8EAArD,CAAA;AA2gBSgB,SAATE,EAAJ;AACC,OAFF,CAEE,OAAMC,CAAN,EAAMA;AACP,eAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,aAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA,KATD,CASCA,CATD,EASCA,UAhhBGV,CAghBHU,EAhhBGV;AACP,aAAOO,CAAAA,CAAIrB,EAAJqB,EAAQP,CAARO,CAAP;AAAeP,KAsgBZ,CAtiB+Bd,CAAAA;AAAtC,GAAsCA,CAAtC,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAAsBG;;AAAtB,SAAA,CAAA,IAAA,cAAA","sourcesContent":["import {isTransaction, isScript, get, Ok, Bad} from \"@onflow/interaction\"\n\nfunction ignore(ix) {\n  return !(isTransaction(ix) || isScript(ix))\n}\n\nasync function fetchParam(param) {\n  return typeof param.resolve === \"function\"\n    ? { ...param, ...await param.resolve(), tempId: param.tempId }\n    : param\n}\n\nexport async function resolveCadence (ix) {\n  try {\n    if (ignore(ix)) return Ok(ix)\n\n    const cadence = get(ix, \"ix.cadence\")\n\n    if (typeof cadence === \"string\") {\n      ix.message.cadence = cadence\n      return Ok(ix)\n\n    } else if (typeof cadence === \"function\") {\n      if (Object.values(ix.params).length >= 1) {\n        console.error(\n          `\n          %cFCL/SDK Deprecation Notice\n          ============================\n\n          Interopolation of functions into template literals will not be a thing in future versions of the Flow-JS-SDK or FCL.\n          You can learn more (including a guide on common transition paths) here: https://github.com/onflow/flow-js-sdk/blob/master/packages/sdk/TRANSITIONS.md#0001-deprecate-params\n\n          ============================\n        `,\n          \"font-weight:bold;font-family:monospace;\"\n        )\n      }\n      const params = Object.fromEntries(Object.values(ix.params).map(p => [p.key, p.value]))\n      ix.message.cadence = await cadence(params)\n      return Ok(ix)\n    } else {\n      throw new Error(`ix.cadence had a type of: \"${typeof cadence}\", but it must needs to be a \"string\" or a \"function\" that returns a string.`)\n    }\n  } catch (error) {\n    return Bad(ix, error)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
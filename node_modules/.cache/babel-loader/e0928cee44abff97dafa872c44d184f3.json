{"ast":null,"code":"import _slicedToArray from \"/Users/mvps/culturex/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useBoolean, useDisclosure, useFocusOnHide, useFocusOnShow, useIds, useOutsideClick } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\";\nimport { callAllHandlers, mergeRefs, mergeWith } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\nexport function usePopover(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      _props$closeOnBlur = _props.closeOnBlur,\n      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n      _props$closeOnEsc = _props.closeOnEsc,\n      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n      initialFocusRef = _props.initialFocusRef,\n      placementProp = _props.placement,\n      gutter = _props.gutter,\n      id = _props.id,\n      arrowSize = _props.arrowSize,\n      _props$returnFocusOnC = _props.returnFocusOnClose,\n      returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC,\n      _props$autoFocus = _props.autoFocus,\n      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,\n      arrowShadowColor = _props.arrowShadowColor,\n      modifiers = _props.modifiers,\n      _props$trigger = _props.trigger,\n      trigger = _props$trigger === void 0 ? TRIGGER.click : _props$trigger,\n      _props$openDelay = _props.openDelay,\n      openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay,\n      _props$closeDelay = _props.closeDelay,\n      closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay,\n      isLazy = _props.isLazy;\n\n  var _useDisclosure = useDisclosure(props),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen,\n      onToggle = _useDisclosure.onToggle;\n\n  var triggerRef = useRef(null);\n  var popoverRef = useRef(null);\n  var isHoveringRef = useRef(false);\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      hasHeader = _useBoolean2[0],\n      setHasHeader = _useBoolean2[1];\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      hasBody = _useBoolean4[0],\n      setHasBody = _useBoolean4[1];\n\n  var _useIds = useIds(id, \"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"),\n      _useIds2 = _slicedToArray(_useIds, 4),\n      triggerId = _useIds2[0],\n      popoverId = _useIds2[1],\n      headerId = _useIds2[2],\n      bodyId = _useIds2[3];\n\n  var fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\");\n  var shadowColor = arrowShadowColor != null ? arrowShadowColor : fallbackShadowColor;\n  var arrowColor = useToken(\"colors\", shadowColor, arrowShadowColor);\n  var popper = usePopper({\n    placement: placementProp,\n    gutter: gutter,\n    arrowSize: arrowSize,\n    arrowShadowColor: arrowColor,\n    modifiers: modifiers\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    visible: isOpen,\n    focusRef: initialFocusRef,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  useOutsideClick({\n    ref: popoverRef,\n    handler: function handler(event) {\n      var _triggerRef$current;\n\n      if (isOpen && trigger === TRIGGER.click && closeOnBlur && !((_triggerRef$current = triggerRef.current) != null && _triggerRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  var getPopoverProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var popoverProps = _extends({}, props, {\n      style: _extends({}, props.style, {\n        transformOrigin: popper.transformOrigin\n      }),\n      ref: mergeRefs(popoverRef, _ref),\n      children: !isLazy || isOpen ? props.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props.onKeyDown, function (event) {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props.onBlur, function (event) {\n        var _event$relatedTarget, _popoverRef$current, _triggerRef$current2;\n\n        var element = (_event$relatedTarget = event.relatedTarget) != null ? _event$relatedTarget : document.activeElement;\n\n        if (isOpen && closeOnBlur && !((_popoverRef$current = popoverRef.current) != null && _popoverRef$current.contains(element)) && !((_triggerRef$current2 = triggerRef.current) != null && _triggerRef$current2.contains(element))) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : undefined,\n      \"aria-describedby\": hasBody ? bodyId : undefined\n    });\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n        setTimeout(onClose, closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [isLazy, isOpen, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, popper, closeOnEsc, onClose, closeDelay, closeOnBlur]);\n\n  var getPopoverPositionerProps = function getPopoverPositionerProps(props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    return getPopperProps(mergeWith(props, {\n      style: {\n        visibility: isOpen ? \"visible\" : \"hidden\"\n      }\n    }), _ref);\n  };\n\n  var openTimeout = useRef();\n  var closeTimeout = useRef();\n  var getTriggerProps = useCallback(function (props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    });\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      /**\n       * Any content that shows on pointer hover should also show on keyboard focus.\n       * Consider focus and blur to be the `hover` for keyboard users.\n       *\n       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n       */\n      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);\n      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);\n      /**\n       * Any content that shows on hover or focus must be dismissible.\n       * This case pressing `Escape` will dismiss the popover\n       */\n\n      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, function (event) {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(onOpen, openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = undefined;\n        }\n\n        closeTimeout.current = window.setTimeout(function () {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return popper.getReferenceProps(triggerProps, mergeRefs(triggerRef, _ref));\n  }, [triggerId, isOpen, popoverId, trigger, popper, onToggle, onOpen, onClose, openDelay, closeDelay]);\n  useEffect(function () {\n    return function () {\n      if (openTimeout.current) clearTimeout(openTimeout.current);\n      if (closeTimeout.current) clearTimeout(closeTimeout.current);\n    };\n  }, []);\n  var getArrowProps = popper.getArrowProps,\n      getArrowWrapperProps = popper.getArrowWrapperProps,\n      getPopperProps = popper.getPopperProps;\n\n  var onTransitionEnd = function onTransitionEnd() {\n    var _popoverRef$current2;\n\n    (_popoverRef$current2 = popoverRef.current) == null ? void 0 : _popoverRef$current2.dispatchEvent(new Event(\"transitionend\"));\n  };\n\n  return {\n    forceUpdate: popper.forceUpdate,\n    isOpen: isOpen,\n    onClose: onClose,\n    headerId: headerId,\n    hasHeader: hasHeader,\n    setHasHeader: setHasHeader,\n    bodyId: bodyId,\n    hasBody: hasBody,\n    setHasBody: setHasBody,\n    onTransitionEnd: onTransitionEnd,\n    getArrowProps: getArrowProps,\n    getArrowPositionerProps: getArrowWrapperProps,\n    getPopoverPositionerProps: getPopoverPositionerProps,\n    getPopoverProps: getPopoverProps,\n    getTriggerProps: getTriggerProps\n  };\n}","map":{"version":3,"sources":["../../src/use-popover.ts"],"names":["TRIGGER","click","hover","props","closeOnBlur","closeOnEsc","placement","returnFocusOnClose","autoFocus","trigger","openDelay","closeDelay","isLazy","onToggle","useDisclosure","triggerRef","useRef","popoverRef","isHoveringRef","useBoolean","useIds","fallbackShadowColor","useColorModeValue","shadowColor","arrowShadowColor","arrowColor","useToken","popper","usePopper","gutter","arrowSize","modifiers","useFocusOnHide","focusRef","visible","shouldFocus","useFocusOnShow","useOutsideClick","ref","handler","event","isOpen","onClose","getPopoverProps","useCallback","_ref","popoverProps","style","transformOrigin","mergeRefs","children","id","tabIndex","role","onKeyDown","callAllHandlers","onBlur","element","document","hasHeader","hasBody","undefined","setTimeout","getPopoverPositionerProps","getPopperProps","mergeWith","visibility","openTimeout","closeTimeout","getTriggerProps","triggerProps","popoverId","window","clearTimeout","useEffect","onTransitionEnd","forceUpdate","headerId","setHasHeader","bodyId","setHasBody","getArrowProps","getArrowPositionerProps"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useDisclosure,\n  useFocusOnHide,\n  useFocusOnShow,\n  useIds,\n  useOutsideClick,\n} from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { useColorModeValue, useToken } from \"@chakra-ui/system\"\nimport {\n  callAllHandlers,\n  FocusableElement,\n  HTMLProps,\n  mergeRefs,\n  mergeWith,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { RefObject, useCallback, useEffect, useRef } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: RefObject<FocusableElement>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   */\n  autoFocus?: boolean\n  /**\n   * The gap (in pixels) to apply between the popover and the target.\n   * Used by `popper.js`\n   */\n  gutter?: number\n  /**\n   * The placment of the popover\n   */\n  placement?: Placement\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The Popper.js modifiers to use.\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   */\n  trigger?: keyof typeof TRIGGER\n  openDelay?: number\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n}\n\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    placement: placementProp,\n    gutter,\n    id,\n    arrowSize,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowShadowColor,\n    modifiers,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const [hasHeader, setHasHeader] = useBoolean()\n  const [hasBody, setHasBody] = useBoolean()\n\n  const [triggerId, popoverId, headerId, bodyId] = useIds(\n    id,\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  )\n\n  const fallbackShadowColor = useColorModeValue(\"gray.200\", \"whiteAlpha.300\")\n  const shadowColor = arrowShadowColor ?? fallbackShadowColor\n  const arrowColor = useToken(\"colors\", shadowColor, arrowShadowColor)\n\n  const popper = usePopper({\n    placement: placementProp,\n    gutter,\n    arrowSize,\n    arrowShadowColor: arrowColor,\n    modifiers,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    visible: isOpen,\n    focusRef: initialFocusRef,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  useOutsideClick({\n    ref: popoverRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        trigger === TRIGGER.click &&\n        closeOnBlur &&\n        !triggerRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: HTMLProps = {\n        ...props,\n        style: { ...props.style, transformOrigin: popper.transformOrigin },\n        ref: mergeRefs(popoverRef, _ref),\n        children: !isLazy || isOpen ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const element = (event.relatedTarget ??\n            document.activeElement) as HTMLElement\n\n          if (\n            isOpen &&\n            closeOnBlur &&\n            !popoverRef.current?.contains(element) &&\n            !triggerRef.current?.contains(element)\n          ) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n          setTimeout(onClose, closeDelay)\n        })\n      }\n\n      return popoverProps\n    },\n    [\n      isLazy,\n      isOpen,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      popper,\n      closeOnEsc,\n      onClose,\n      closeDelay,\n      closeOnBlur,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = (props = {}, _ref = null) =>\n    getPopperProps(\n      mergeWith(props, {\n        style: { visibility: isOpen ? \"visible\" : \"hidden\" },\n      }),\n      _ref,\n    )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: HTMLProps = {\n        ...props,\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen)\n        triggerProps.onBlur = callAllHandlers(props.onBlur, onClose)\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(onOpen, openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return popper.getReferenceProps(triggerProps, mergeRefs(triggerRef, _ref))\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      popper,\n      onToggle,\n      onOpen,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(\n    () => () => {\n      if (openTimeout.current) clearTimeout(openTimeout.current)\n      if (closeTimeout.current) clearTimeout(closeTimeout.current)\n    },\n    [],\n  )\n\n  const { getArrowProps, getArrowWrapperProps, getPopperProps } = popper\n\n  const onTransitionEnd = () => {\n    popoverRef.current?.dispatchEvent(new Event(\"transitionend\"))\n  }\n\n  return {\n    forceUpdate: popper.forceUpdate,\n    isOpen,\n    onClose,\n    headerId,\n    hasHeader,\n    setHasHeader,\n    bodyId,\n    hasBody,\n    setHasBody,\n    onTransitionEnd,\n    getArrowProps,\n    getArrowPositionerProps: getArrowWrapperProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n"]},"metadata":{},"sourceType":"module"}